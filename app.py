from flask import Flask, jsonify, request, send_from_directory
from qiskit import QuantumCircuit, Aer, execute
from flask_cors import CORS
import string

app = Flask(__name__)
CORS(app)

# --- Quantum Random Bit Generator ---
def generate_quantum_random_bits(n=8):
    qc = QuantumCircuit(n, n)
    qc.h(range(n))  # Put qubits into superposition
    qc.measure(range(n), range(n))

    simulator = Aer.get_backend('qasm_simulator')
    job = execute(qc, simulator, shots=1)
    result = job.result()
    counts = result.get_counts(qc)

    bit_string = list(counts.keys())[0]
    decimal_value = int(bit_string, 2)
    hex_value = hex(decimal_value)

    return bit_string, decimal_value, hex_value

# --- Serve Frontend ---
@app.route('/')
def home():
    return send_from_directory('static', 'index.html')

# --- Quantum Random Number API ---
@app.route('/quantum-random', methods=['GET'])
def get_quantum_random():
    try:
        n = int(request.args.get('n', 8))  # Default to 8 bits
        if n < 1 or n > 64:
            return jsonify({"error": "Number of bits must be between 1 and 64"}), 400

        bits, decimal_value, hex_value = generate_quantum_random_bits(n)
        return jsonify({
            "quantum_bits": bits,
            "decimal_value": decimal_value,
            "hex_value": hex_value,
            "bits_requested": n,
            "source": "qasm_simulator (quantum logic)",
            "explanation": "Bits generated by measuring qubits in superposition."
        })

    except Exception as e:
        return jsonify({"error": str(e)}), 500

# --- Quantum Password Generator API ---
@app.route('/quantum-password', methods=['GET'])
def generate_quantum_password():
    try:
        length = int(request.args.get("length", 12))  # Default password length = 12
        if length < 4 or length > 64:
            return jsonify({"error": "Password length must be between 4 and 64"}), 400

        charset = string.ascii_letters + string.digits + "!@#$%^&*()_+-=<>?"
        bits_needed = length * 8
        bit_string, _, _ = generate_quantum_random_bits(bits_needed)

        password = ""
        for i in range(0, bits_needed, 8):
            byte = bit_string[i:i+8]
            index = int(byte, 2) % len(charset)
            password += charset[index]

        return jsonify({
            "quantum_password": password,
            "length": length,
            "charset_used": "A-Z, a-z, 0-9, symbols",
            "source": "qasm_simulator (quantum logic)",
            "note": "Generated using quantum randomness for high entropy."
        })

    except Exception as e:
        return jsonify({"error": str(e)}), 500

# --- Run App ---
if __name__ == '__main__':
    app.run(debug=True)
